.gitignore file created
    .env
    Requirements  # my details for readme file. at last it will be visible.

python -m venv .env
. .env/scripts/activate
pip install django djangorestframework
django-admin startproject API_GEO . #project created


pip install djangorestframework-simplejwt
django-admin startapp USER 

DB created  #DB Connection string   @ settings.py
    DATABASES = {
    'default': {
         'ENGINE': 'django.contrib.gis.db.backends.postgis',
         'NAME': 'DB_API_GEO01', # Name of your db
         'USER': 'gisadmin', # Name of the user
         'PASSWORD': 'Role1453', # Password
         'HOST': '127.0.0.1',
         'PORT': '5432',
        },
    'raster': {
         'ENGINE': 'django.contrib.gis.db.backends.postgis',
         'NAME': 'DB_API_GEO02', # Name of your db
         'USER': 'gisadmin', # Name of the user
         'PASSWORD': 'Role1453', # Password
         'HOST': '127.0.0.1',
         'PORT': '5432',
        }
    }

pip install psycopg2  #For PostgreSQL
pip install wheel
pip install drf_yasg
INSTALLED_APPS = [    #settings.py
    'drf_yasg',
    'django.contrib.gis',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'API_GEO',
]

# u can find the GDAL install file GDAL-3.4.1-cp310-cp310-win_amd64.whl at Requirements/files
pip install Requirements/files/GDAL-3.4.1-cp310-cp310-win_amd64.whl
#GDAL PATHs
if os.name == 'nt':
    VIRTUAL_ENV_BASE = os.environ['VIRTUAL_ENV']
    os.environ['PATH'] = os.path.join(VIRTUAL_ENV_BASE, 'Lib\site-packages\osgeo') 
    os.environ['PROJ_LIB'] = os.path.join(VIRTUAL_ENV_BASE, 'Lib\site-packages\osgeo\data\proj') 
    os.environ['GDAL_DATA'] = os.path.join(VIRTUAL_ENV_BASE, 'Lib\site-packages\osgeo\data\gdal')
os.environ['GDAL_VERSION']= '3.0.4'   
#libgdal.py update like below
lib_names = [
        "gdal",
        "GDAL",
        "gdal341",
        "gdal3.3.0",
        "gdal3.2.0",
        "gdal3.1.0",
        "gdal3.0.0",
        "gdal2.4.0",
        "gdal2.3.0",
        "gdal2.2.0",
        "gdal2.1.0",
        "gdal2.0.0",
    ]

REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend'
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
}

#For GeoIP get city and country from ip   to settings.py
#Required files are in Requirements/files
    pip install geoip2 
    GEOIP_PATH = os.path.join(VIRTUAL_ENV_BASE, 'Lib\site-packages\geoip2')
    GEOIP_COUNTRY = os.path.join(GEOIP_PATH, 'GEOIP_COUNTRY.mmdb')
    GEOIP_CITY = os.path.join(GEOIP_PATH, 'GEOIP_CITY.mmdb') 

#for swagger add to urls.py
    schema_view = get_schema_view(
    openapi.Info(
      title="Snippets API",
      default_version='v1',
      description="Test description",
      terms_of_service="https://www.google.com/policies/terms/",
      contact=openapi.Contact(email="contact@snippets.local"),
      license=openapi.License(name="BSD License"),
    ),
    public=True,
    permission_classes=[permissions.AllowAny],
    )

    re_path(
        r"^swagger(?P<format>\.json|\.yaml)$",
        schema_view.without_ui(cache_timeout=0),
        name="schema-json",
    ),
    re_path(
        r"^docs/$",
        schema_view.with_ui("swagger", cache_timeout=0),
        name="schema-swagger-ui",
    ),
    re_path(
        r"^redoc/$",
        schema_view.with_ui("redoc", cache_timeout=0),
        name="schema-redoc",  # noqa
    ),

 _____________________________________________________________________

python manage.py makemigrations API_GEO
python manage.py migrate
python manage.py createsuperuser
python manage.py runserver


pip install Requirements/files/rasterio-1.2.10-cp310-cp310-win_amd64.whl 


#put all country geodata to fdatabase
Requirements/files/countries.geojson           #country geodata
Requirements\Codes\PutCountriesToDatabase.py   #script to put data to database


#write raster to database 
#do it with cmd  in directory  c:\ProgramFiles\PostgreSQL\14\bin\
raster2pgsql.exe -I -c -s 4326 -t 100x100 -F -M E:\DATA\a\* public.worldmap | psql -U gisadmin --dbname=DB --host=127.0.0.1 --port=5432
raster2pgsql.exe -I -a -s 4326 -t 100x100 -F -M E:\DATA\b\* public.worldmap | psql -U gisadmin --dbname=DB --host=127.0.0.1 --port=5432
raster2pgsql.exe -I -a -C -s 4326 -t 100x100 -F -M E:\DATA\c\* public.worldmap | psql -U gisadmin --dbname=DB --host=127.0.0.1 --port=5432
subprocess.call(cmds, shell=True)

#to play with sql queries
pip install sqlalchemy

raster2pgsql.exe -I -c -s 4326 -t 100x100 -F -M C:\1\* public.worldmap | psql -U postgres --dbname=spatialdb.cg3ycy9vkgam.eu-north-1.rds.amazonaws.com --host=spatialdb.cg3ycy9vkgam.eu-north-1.rds.amazonaws.com --port=5432